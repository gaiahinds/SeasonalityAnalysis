n = 2
GroupedYearJ = aggregate(oneyearJ,list(rep(1:(nrow(oneyearJ)%/%n+1),each=n,len=nrow(oneyearJ))),mean)[-1];
n = 3
GroupedYearM = aggregate(oneyearM,list(rep(1:(nrow(oneyearM)%/%n+1),each=n,len=nrow(oneyearM))),mean)[-1];
}
if (site == 'BD'){
n = 7
GroupedYearF = aggregate(oneyearF,list(rep(1:(nrow(oneyearF)%/%n+1),each=n,len=nrow(oneyearF))),mean)[-1];
n = 5
GroupedYearJ = aggregate(oneyearJ,list(rep(1:(nrow(oneyearJ)%/%n+1),each=n,len=nrow(oneyearJ))),mean)[-1];
n = 4
GroupedYearM = aggregate(oneyearM,list(rep(1:(nrow(oneyearM)%/%n+1),each=n,len=nrow(oneyearM))),mean)[-1];
}
if (site == 'QN'){
GroupedYearF = oneyearF;
n = 2
GroupedYearJ = aggregate(oneyearJ,list(rep(1:(nrow(oneyearJ)%/%n+1),each=n,len=nrow(oneyearJ))),mean)[-1];
n = 4
GroupedYearM = aggregate(oneyearM,list(rep(1:(nrow(oneyearM)%/%n+1),each=n,len=nrow(oneyearM))),mean)[-1];
}
if (site == 'CB'){
GroupedYearF = oneyearF;
n = 21
GroupedYearJ = aggregate(oneyearJ,list(rep(1:(nrow(oneyearJ)%/%n+1),each=n,len=nrow(oneyearJ))),mean)[-1];
n = 14
GroupedYearM = aggregate(oneyearM,list(rep(1:(nrow(oneyearM)%/%n+1),each=n,len=nrow(oneyearM))),mean)[-1];
}
if (site == 'AB'){
GroupedYearF = oneyear;
n = 3
GroupedYearJ = aggregate(oneyear,list(rep(1:(nrow(oneyear)%/%n+1),each=n,len=nrow(oneyear))),mean)[-1];
n = 4
GroupedYearM = aggregate(oneyear,list(rep(1:(nrow(oneyear)%/%n+1),each=n,len=nrow(oneyear))),mean)[-1];
}
if (site == 'KOA'){
GroupedYearF = oneyear;
n = 2
GroupedYearJ = aggregate(oneyear,list(rep(1:(nrow(oneyear)%/%n+1),each=n,len=nrow(oneyear))),mean)[-1];
n = 2
GroupedYearM = aggregate(oneyear,list(rep(1:(nrow(oneyear)%/%n+1),each=n,len=nrow(oneyear))),mean)[-1];
}
if (site == 'KS' || site == 'GI'){
GroupedYearF = oneyearF;
GroupedYearJ = oneyearJ;
GroupedYearM = oneyearM;
}
if (exists('oneyearF')){
oneyear = oneyearF
}
#round day, year, month, and find season for ITS data
if (nrow(oneyear) == nrow(GroupedYearF)){
if (exists('GroupedYearF')){
GroupedYearF$Day = floor(GroupedYearF$Day)
GroupedYearF$Month = floor(GroupedYearF$Month)
GroupedYearF$Season = as.integer(GroupedYearF$Season)
GroupedYearF$Season[GroupedYearF$Month == 1 | GroupedYearF$Month == 2 | GroupedYearF$Month == 3] = 1
GroupedYearF$Season[GroupedYearF$Month == 4 | GroupedYearF$Month == 5 | GroupedYearF$Month == 6] = 2
GroupedYearF$Season[GroupedYearF$Month == 7 | GroupedYearF$Month == 8 | GroupedYearF$Month == 9] = 3
GroupedYearF$Season[GroupedYearF$Month == 10 | GroupedYearF$Month == 11 | GroupedYearF$Month == 12] = 4
GroupedYearF$Season = as.factor(GroupedYearF$Season) #change season from an integer to a factor
GroupedYearF$Season = revalue(GroupedYearF$Season, c("1"="Winter", "2"="Spring", "3"="Summer", "4"="Fall"))
}
}
if (nrow(oneyear) == nrow(GroupedYearJ)){
GroupedYearJ$Day = floor(GroupedYearJ$Day)
GroupedYearJ$Month = floor(GroupedYearJ$Month)
GroupedYearJ$Season = as.integer(GroupedYearJ$Season)
GroupedYearJ$Season[GroupedYearJ$Month == 1 | GroupedYearJ$Month == 2 | GroupedYearJ$Month == 3] = 1
GroupedYearJ$Season[GroupedYearJ$Month == 4 | GroupedYearJ$Month == 5 | GroupedYearJ$Month == 6] = 2
GroupedYearJ$Season[GroupedYearJ$Month == 7 | GroupedYearJ$Month == 8 | GroupedYearJ$Month == 9] = 3
GroupedYearJ$Season[GroupedYearJ$Month == 10 | GroupedYearJ$Month == 11 | GroupedYearJ$Month == 12] = 4
GroupedYearJ$Season = as.factor(GroupedYearJ$Season) #change season from an integer to a factor
GroupedYearJ$Season = revalue(GroupedYearJ$Season, c("1"="Winter", "2"="Spring", "3"="Summer", "4"="Fall"))
}
if (nrow(oneyear) == nrow(GroupedYearM)){
GroupedYearM$Day = floor(GroupedYearM$Day)
GroupedYearM$Month = floor(GroupedYearM$Month)
GroupedYearM$Season = as.integer(GroupedYearJ$Season)
GroupedYearM$Season[GroupedYearM$Month == 1 | GroupedYearM$Month == 2 | GroupedYearM$Month == 3] = 1
GroupedYearM$Season[GroupedYearM$Month == 4 | GroupedYearM$Month == 5 | GroupedYearM$Month == 6] = 2
GroupedYearM$Season[GroupedYearM$Month == 7 | GroupedYearM$Month == 8 | GroupedYearM$Month == 9] = 3
GroupedYearM$Season[GroupedYearM$Month == 10 | GroupedYearM$Month == 11 | GroupedYearM$Month == 12] = 4
GroupedYearM$Season = as.factor(GroupedYearM$Season) #change season from an integer to a factor
GroupedYearM$Season = revalue(GroupedYearM$Season, c("1"="Winter", "2"="Spring", "3"="Summer", "4"="Fall"))
}
#plot data as time series
#plot data as proportion of hours per day with clicks
if (exists('oneyearF')){
title3 = paste(site,"Yearly Average of Proportion of Hours per Day with Clicks - Time Series")
plot1 = ggplot(oneyearF, aes(x=Day,y=HoursPropFE))+
geom_bar(stat = "identity")+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
plot2 = ggplot(oneyearJ, aes(x=Day,y=HoursPropJU))+
geom_bar(stat = "identity")+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
plot3 = ggplot(oneyearM, aes(x=Day,y=HoursPropMA))+
geom_bar(stat = "identity")+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
figure = ggarrange(plot1,plot2,plot3, labels = c("Social Units","  Mid-Size  ","    Males   "),align = "v",ncol = 1, nrow = 3)
annotate_figure(figure, top = text_grob(title1, face = "bold", size = 14), bottom = text_grob("Time (years)"),
left = text_grob("Proportion of Hours/Day w/Clicks", rot = 90))
fig1 = paste(saveDir,site,"AveragedHoursProp_TimeSeries_StackedGroups.png",sep="")
ggsave(fig1)
}
#plot data grouped with ITS as proportion of hours per day with clicks
title1 = paste(site,"Yearly Average of Proportion of Hours per Day with Clicks - Time Series (ITS)")
plot1 = ggplot(GroupedYearF, aes(x=Day,y=HoursPropFE))+
geom_bar(stat = "identity")+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
plot2 = ggplot(GroupedYearJ, aes(x=Day,y=HoursPropJU))+
geom_bar(stat = "identity")+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
plot3 = ggplot(GroupedYearM, aes(x=Day,y=HoursPropMA))+
geom_bar(stat = "identity")+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
figure = ggarrange(plot1,plot2,plot3, labels = c("Social Units","  Mid-Size  ","    Males   "),align = "v",ncol = 1, nrow = 3)
annotate_figure(figure, top = text_grob(title1, face = "bold", size = 14), bottom = text_grob("Time (years)"),
left = text_grob("Proportion of Hours/Day w/Clicks", rot = 90))
fig1 =paste(saveDir,site,"AveragedHoursProp_TimeSeriesITS_StackedGroups.png",sep="")
ggsave(fig1)
if (nrow(oneyear) >= 365) {
#plot data as time series with error bars
title4 = paste(site,"Yearly Average of Proportion of Hours per Day with Clicks - Time Series")
plot1 = ggplot(oneyearF, aes(x=Day,y=HoursPropFE))+
geom_errorbar(aes(ymin = HoursPropFE - SEM, ymax = HoursPropFE + SEM))+
geom_line()+
geom_point()+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
plot2 = ggplot(oneyearJ, aes(x=Day,y=HoursPropJU))+
geom_errorbar(aes(ymin = HoursPropJU - SEM, ymax = HoursPropJU + SEM))+
geom_line()+
geom_point()+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
plot3 = ggplot(oneyearM, aes(x=Day,y=HoursPropMA))+
geom_errorbar(aes(ymin = HoursPropMA - SEM, ymax = HoursPropMA + SEM))+
geom_line()+
geom_point()+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
figure = ggarrange(plot1,plot2,plot3, labels = c("Social Units","  Mid-Size  ","    Males   "),align = "v",ncol = 1, nrow = 3)
annotate_figure(figure, top = text_grob(title1, face = "bold", size = 14), bottom = text_grob("Time (years)"),
left = text_grob("Proportion of Hours/Day w/Clicks", rot = 90))
fig5 =paste(saveDir,site,"AveragedHoursProp_TimeSeries_ErrorBars_StackedGroups.png",sep="")
ggsave(fig5)
}
gamTw = gam(FeHoursProp ~ s(day, bs = 'cc', k = 47), data = GroupedDayF, family = tw, method = "REML")
plot(gamTw, pages =1)
summary(gamTw)
#GAM to check for significance between seasons
gamTwS = gam(FeHoursProp ~ Season, data = GroupedDayF, family = tw, method = "REML")
summary(gamTwS)
viz = getViz(gamTw)
print(plot(viz,allTerms=T),pages=1)
vizGG = plot(viz,allTerms = T) +
labs(title = 'Social Units (GAM)', x = 'Day of Year')+
l_fitLine(linetype = 1, size = 2)  +
l_fitContour()+
#l_ciLine(mul = 5, colour = "blue", linetype = 2) +
l_ciPoly(level = 0.95, alpha = 1/2)+
l_ciBar() +
theme(axis.text=element_text(size=18),
axis.title=element_text(size=20,face="bold"))
theme_get()
print(vizGG,pages =1)
gamTw = gam(JuHoursProp ~ s(day, bs = 'cc', k = 47), data = GroupedDayJ, family = tw, method = "REML")
plot(gamTw, pages =1)
summary(gamTw)
#GAM to check for significance between seasons
gamTwS = gam(JuHoursProp ~ Season, data = GroupedDayJ, family = tw, method = "REML")
summary(gamTwS)
#Better GAM plots
#pattern only
viz = getViz(gamTw)
print(plot(viz,allTerms=T),pages=1)
#first way to plot GAM
vizGG = plot(viz,allTerms = T) +
labs(title = 'Mid-Size (GAM)')+
l_fitLine(linetype = 1, size = 2)  +
l_fitContour()+
#l_ciLine(mul = 5, colour = "blue", linetype = 2) +
l_ciPoly(level = 0.95, alpha = 1/2)+
l_ciBar() +
theme(axis.text=element_text(size=18),
axis.title=element_text(size=20,face="bold"))
print(vizGG,pages =1)
fig6 =paste(saveDir,site,"GAM1_Juveniles.png",sep="")
ggsave(fig6)
# Libraries
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
library(ggplot2)
library(dplyr)
library(forcats)
library(ggpubr)
library(plyr)
library(anytime)
library(fANCOVA)
library(tweedie)
library(car)
library(locfit)
library(MuMIn)
library(tidyverse)
library(mgcv)
library(ggpubr)
library(mgcViz)
library(cplm)
library(statmod)
library(gee)
library(geepack)
library(TSA)
library(epitools)
library(lubridate)
library(survival)
#load data
site = 'GI'
saveDir = paste("G:/Baja/Seasonality/")
filename = paste(saveDir,site,"_dayData_forGLMR125.csv",sep="")
dayBinTAB = read.csv(filename) #no effort days deleted
head(dayBinTAB)
str(dayBinTAB)
dayBinTAB$Season = as.factor(dayBinTAB$Season) #change season from an integer to a factor
levels(dayBinTAB$Season)
dayBinTAB$Season = revalue(dayBinTAB$Season, c("1"="Summer", "2"="Fall", "3"="Winter", "4"="Spring")) #change the numbers in actual seasons
dayBinTAB$tbin = anytime(as.factor(dayBinTAB$tbin))
#plot data as proportion of hours per day with clicks
title1 = paste(site,"Proportion of Hours per Day with Clicks")
ggplot(dayBinTAB, aes(x=tbin,y=HoursProp))+
ggtitle(title1)+
labs(y="Proportion of Hours per Day with Clicks",x="Time (days)")+
geom_line()+
geom_point()
fig1 =paste(saveDir,site,"HoursProp_TimeSeries.png",sep="")
ggsave(fig1)
#plot data as box plot for seasons; have to plot this with no effort days deleted
title2 = paste("Seasonal Presence at",site)
ggplot(dayBinTAB, aes(x=Season, y=HoursProp, color = Season))+
geom_boxplot()+
ggtitle(title2)+
labs(y="Proportion of Hours per Day with Clicks")
scale_color_brewer(palette = "Dark2")
fig2 =paste(saveDir,site,"BoxPlot.png",sep="")
ggsave(fig2)
#groupin data according to ITS
if (site == 'PT'){
n = 4
GroupedDay = aggregate(dayBinTAB,list(rep(1:(nrow(dayBinTAB)%/%n+1),each=n,len=nrow(dayBinTAB))),mean)[-1];
}
if (site == 'BD'){
n = 5
GroupedDay = aggregate(dayBinTAB,list(rep(1:(nrow(dayBinTAB)%/%n+1),each=n,len=nrow(dayBinTAB))),mean)[-1];
}
if (site == 'QN'){
n = 12
GroupedDay = aggregate(dayBinTAB,list(rep(1:(nrow(dayBinTAB)%/%n+1),each=n,len=nrow(dayBinTAB))),mean)[-1];
}
if (site == 'CB'){
n = 10
GroupedDay = aggregate(dayBinTAB,list(rep(1:(nrow(dayBinTAB)%/%n+1),each=n,len=nrow(dayBinTAB))),mean)[-1];
}
if (site == 'AB'){
n = 6
GroupedDay = aggregate(dayBinTAB,list(rep(1:(nrow(dayBinTAB)%/%n+1),each=n,len=nrow(dayBinTAB))),mean)[-1];
}
if (site == 'KOA'){
n = 3
GroupedDay = aggregate(dayBinTAB,list(rep(1:(nrow(dayBinTAB)%/%n+1),each=n,len=nrow(dayBinTAB))),mean)[-1];
}
if (site == 'KS'){
GroupedDay = dayBinTAB
}
if (site == 'GI'){
GroupedDay = dayBinTAB
}
#round day, year, month, and find season for ITS data
if (site == 'KS' || site == "GI"){
}else{
GroupedDay$day = floor(GroupedDay$day)
GroupedDay$month = floor(GroupedDay$month)
GroupedDay$Year = floor(GroupedDay$Year)
GroupedDay$Season[GroupedDay$month == 1 | GroupedDay$month == 2 | GroupedDay$month == 3] = 1
GroupedDay$Season[GroupedDay$month == 4 | GroupedDay$month == 5 | GroupedDay$month == 6] = 2
GroupedDay$Season[GroupedDay$month == 7 | GroupedDay$month == 8 | GroupedDay$month == 9] = 3
GroupedDay$Season[GroupedDay$month == 10 | GroupedDay$month == 11 | GroupedDay$month == 12] = 4
GroupedDay$Season = as.factor(GroupedDay$Season) #change season from an integer to a factor
GroupedDay$Season = revalue(GroupedDay$Season, c("1"="Winter", "2"="Spring", "3"="Summer", "4"="Fall")) #change the numbers in actual seasons
}
#plot data grouped with ITS as proportion of hours per day with clicks
title1 = paste(site,"Proportion of Hours per Day with Clicks")
ggplot(GroupedDay, aes(x=tbin,y=HoursProp))+
ggtitle(title1)+
labs(y="Proportion of Hours per Day with Clicks",x="Time (days)")+
geom_line()+
geom_point()
fig1 =paste(saveDir,site,"HoursProp_TimeSeriesITS.png",sep="")
ggsave(fig1)
##### grouped data by day of year - mean
filename2 = paste(saveDir,site,"_days365GroupedMean_forGLMR125.csv",sep="")
oneyear = read.csv(filename2) #bin means from days
if (nrow(oneyear) >= 365) {
names(oneyear) <- c("Day", "HoursProp", "SEM", "Std", "Variance", "Range", 'Season', "Month")
oneyear$Season = as.factor(oneyear$Season) #change season from an integer to a factor
levels(oneyear$Season)
oneyear$Season = revalue(oneyear$Season, c("1"="Summer", "2"="Fall", "3"="Winter", "4"="Spring")) #change the numbers in actual seasons
head(oneyear)
str(oneyear)
} else {
oneyear$Season = as.factor(oneyear$Season) #change season from an integer to a factor
levels(oneyear$Season)
oneyear$Season = revalue(oneyear$Season, c("1"="Summer", "2"="Fall", "3"="Winter", "4"="Spring")) #change the numbers in actual seasons
head(oneyear)
str(oneyear)
}
#groupin data according to ITS
if (site == 'PT'){
n = 4
GroupedYear = aggregate(oneyear,list(rep(1:(nrow(oneyear)%/%n+1),each=n,len=nrow(oneyear))),mean)[-1];
}
if (site == 'BD'){
n = 5
GroupedYear = aggregate(oneyear,list(rep(1:(nrow(oneyear)%/%n+1),each=n,len=nrow(oneyear))),mean)[-1];
}
if (site == 'QN'){
n = 5
GroupedYear = aggregate(oneyear,list(rep(1:(nrow(oneyear)%/%n+1),each=n,len=nrow(oneyear))),mean)[-1];
}
if (site == 'CB'){
n = 21
GroupedYear = aggregate(oneyear,list(rep(1:(nrow(oneyear)%/%n+1),each=n,len=nrow(oneyear))),mean)[-1];
}
if (site == 'AB'){
n = 6
GroupedYear = aggregate(oneyear,list(rep(1:(nrow(oneyear)%/%n+1),each=n,len=nrow(oneyear))),mean)[-1];
}
if (site == 'KOA'){
n = 3
GroupedYear = aggregate(oneyear,list(rep(1:(nrow(oneyear)%/%n+1),each=n,len=nrow(oneyear))),mean)[-1];
}
if (site == 'KS'){
GroupedYear = oneyear
}
if (site == 'GI'){
GroupedYear = oneyear
}
#round day, year, month, and find season for ITS data
if (site == 'KS' || site == 'GI'){
}else{
GroupedYear$Month = month(as.Date(GroupedYear$Day, origin = "2014-01-01"))
GroupedYear$Season[GroupedYear$Month == 1 | GroupedYear$Month == 2 | GroupedYear$Month == 3] = 1
GroupedYear$Season[GroupedYear$Month == 4 | GroupedYear$Month == 5 | GroupedYear$Month == 6] = 2
GroupedYear$Season[GroupedYear$Month == 7 | GroupedYear$Month == 8 | GroupedYear$Month == 9] = 3
GroupedYear$Season[GroupedYear$Month == 10 | GroupedYear$Month == 11 | GroupedYear$Month == 12] = 4
GroupedYear$Season = as.factor(GroupedYear$Season) #change season from an integer to a factor
GroupedYear$Season = revalue(GroupedYear$Season, c("1"="Winter", "2"="Spring", "3"="Summer", "4"="Fall")) #change the numbers in actual seasons
}
#plot data as time series
title3 = paste(site,"Yearly Average of Proportion of Hours per Day with Clicks")
ggplot(oneyear, aes(x=Day,y=HoursProp))+
ggtitle(title3)+
labs(y="Average Proportion of Hours per Day with Clicks",x="Day of the Year")+
geom_line()+
geom_point()
fig4 =paste(saveDir,site,"AveragedHoursProp_TimeSeries.png",sep="")
ggsave(fig4)
#plot data as time series with ITS
title3 = paste(site,"Yearly Average of Proportion of Hours per Day with Clicks")
ggplot(GroupedYear, aes(x=Day,y=HoursProp))+
ggtitle(title3)+
labs(y="Average Proportion of Hours per Day with Clicks",x="Day of the Year")+
geom_line()+
geom_point()
fig4 =paste(saveDir,site,"AveragedHoursProp_TimeSeriesITS.png",sep="")
ggsave(fig4)
if (nrow(oneyear) >= 365) {
#plot data as time series with error bars
title4 = paste(site,"Yearly Average of Proportion of Hours per Day with Clicks")
ggplot(oneyear, aes(x=Day,y=HoursProp))+
ggtitle(title4)+
labs(y="Average Proportion of Hours per Day with Clicks",x="Day of the Year")+
geom_errorbar(aes(ymin = HoursProp - SEM, ymax = HoursProp + SEM))+
geom_line()+
geom_point()
fig5 =paste(saveDir,site,"AveragedHoursProp_TimeSeries_ErrorBars.png",sep="")
ggsave(fig5)
}else{}
## GAMs ##
#GAMs with appropiate ITS binning
#GAM to identify seasonal pattern
if (site == 'AB'){
gamTw = gam(HoursProp ~ s(day, bs = 'cc', k = 19), data = GroupedDay, family = tw, method = "REML")
plot(gamTw, pages =1)
summary(gamTw)
}else{
gamTw = gam(HoursProp ~ s(day, bs = 'cc', k = 47), data = GroupedDay, family = tw, method = "REML")
plot(gamTw, pages =1)
summary(gamTw)
}
#GAM to check for significance between seasons
gamTwS = gam(HoursProp ~ Season, data = GroupedDay, family = tw, method = "REML")
summary(gamTwS)
#Better GAM plots
#pattern only
viz = getViz(gamTw)
print(plot(viz,allTerms=T),pages=1)
#first way to plot GAM
vizGG = plot(viz,allTerms = T) +
l_points() +
labs(title = 'Sperm whales (GAM)')+
l_fitLine(linetype = 3)  +
l_fitContour()+
l_ciLine(mul = 5, colour = "blue", linetype = 2) +
l_ciBar() +
l_points(shape = 19, size = 1, alpha = 0.1) +
l_rug() +
theme_get()
print(vizGG,pages =1)
fig6 =paste(saveDir,site,"GAM1.png",sep="")
ggsave(fig6)
#second way to plot GAM
vizGG2 = plot(viz, allTerms = T) +
l_fitLine(colour = "red") + l_rug(mapping = aes(x=x,y=y), alpha=0.8) +
labs(title = 'Sperm whales (GAM)')+
l_ciLine(mul = 5, colour = "blue", linetype = 2)+
l_points(shape = 19, size = 1, alpha = 0.1) + theme_classic()
print(vizGG2,pages =1)
fig7 =paste(saveDir,site,"GAM2.png",sep="")
ggsave(fig7)
###load all data and run GAM
filename = paste("G:/My Drive/GofAK_TPWS_metadataReduced/SeasonalityAnalysis/All_Data.csv",sep="")
AllTAB = read.csv(filename) #no effort days deleted
head(AllTAB)
str(AllTAB)
AllTAB$Season = as.factor(AllTAB$Season) #change season from an integer to a factor
levels(AllTAB$Season)
AllTAB$Season = revalue(AllTAB$Season, c("1"="Summer", "2"="Fall", "3"="Winter", "4"="Spring")) #change the numbers in actual seasons
AllTAB$tbin = anytime(as.factor(AllTAB$tbin))
#remove NaNs
AllTable = na.omit(AllTAB)
AllTable$Site = as.character(AllTable$Site)
#table with only CB, QN, PT
Central_GOA = subset(AllTable, Site!="BD" & Site!="KS" & Site!="KOA" & Site!="AB")
gamALL = gam(HoursProp ~ s(day, bs = 'cc', k = 47), data = AllTable, family = tw, method = "REML")
plot(gamALL, pages =1)
summary(gamALL)
#Better GAM plots
#pattern only
viz = getViz(gamALL)
print(plot(viz,allTerms=T),pages=1)
#first way to plot GAM
vizGG = plot(viz,allTerms = T) +
labs(title = 'Sperm whales (GAM)')+
l_fitLine(linetype = 1, size = 2)  +
l_fitContour()+
#l_ciLine(mul = 5, colour = "blue", linetype = 2) +
l_ciPoly(level = 0.95, alpha = 1/2)+
l_ciBar() +
theme(axis.text=element_text(size=18),
axis.title=element_text(size=20,face="bold"))
print(vizGG,pages =1)
fig6 =paste("G:/My Drive/GofAK_TPWS_metadataReduced/SeasonalityAnalysis/GAM1.png",sep="")
ggsave(fig6)
#first way to plot GAM
vizGG = plot(viz,allTerms = T) +
l_points() +
labs(title = 'Sperm whales (GAM)')+
l_fitLine(linetype = 3)  +
l_fitContour()+
l_ciLine(mul = 5, colour = "blue", linetype = 2) +
l_ciBar() +
l_points(shape = 19, size = 1, alpha = 0.1) +
l_rug() +
theme_get()
print(vizGG,pages =1)
fig6 =paste(saveDir,site,"GAM1.png",sep="")
ggsave(fig6)
vizGG2 = plot(viz, allTerms = T) +
l_fitLine(colour = "red") + l_rug(mapping = aes(x=x,y=y), alpha=0.8) +
labs(title = 'Sperm whales (GAM)')+
l_ciLine(mul = 5, colour = "blue", linetype = 2)+
l_points(shape = 19, size = 1, alpha = 0.1) + theme_classic()
print(vizGG2,pages =1)
fig7 =paste(saveDir,site,"GAM2.png",sep="")
ggsave(fig7)
vizGG2 = plot(viz, allTerms = T) +
labs(title = 'Sperm whales (GAM)')+
l_fitLine(linetype = 1, size = 2)  +
l_fitContour()+
#l_ciLine(mul = 5, colour = "blue", linetype = 2) +
l_ciPoly(level = 0.95, alpha = 1/2)+
l_ciBar() +
theme(axis.text=element_text(size=18),
axis.title=element_text(size=20,face="bold"))
fig7 =paste(saveDir,site,"GAM2.png",sep="")
ggsave(fig7)
vizGG = plot(viz,allTerms = T) +
labs(title = 'Sperm whales (GAM)')+
l_fitLine(linetype = 1, size = 2)  +
l_fitContour()+
#l_ciLine(mul = 5, colour = "blue", linetype = 2) +
l_ciPoly(level = 0.95, alpha = 1/2)+
l_ciBar() +
theme(axis.text=element_text(size=18),
axis.title=element_text(size=20,face="bold"))
print(vizGG,pages =1)
fig6 =paste(saveDir,site,"GAM1.png",sep="")
ggsave(fig6)
